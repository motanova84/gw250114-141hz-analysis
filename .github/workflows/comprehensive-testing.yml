name: Comprehensive Testing

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    # Run daily at 00:00 UTC
    - cron: '0 0 * * *'

jobs:
  unit-tests:
    name: Unit Tests - Python ${{ matrix.python-version }} - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.11', '3.12']
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libigraph-dev \
            libigraph3t64 \
            llvm-dev \
            build-essential \
            gfortran
      
      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install igraph llvm
      
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-test-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-test-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-xdist
        env:
          NUMEXPR_MAX_THREADS: 4
          NUMEXPR_NUM_THREADS: 2
      
      - name: Generate validation files
        run: |
          python scripts/generar_validacion_pilares.py
        continue-on-error: true
      
      - name: Run all unit tests
        run: |
          python scripts/run_all_tests.py
        env:
          NUMEXPR_MAX_THREADS: 4
          NUMEXPR_NUM_THREADS: 2
        timeout-minutes: 30
      
      - name: Run pytest tests
        run: |
          pytest scripts/ -v --tb=short --maxfail=5 -n auto || echo "Some pytest tests failed"
        env:
          NUMEXPR_MAX_THREADS: 4
          NUMEXPR_NUM_THREADS: 2
        continue-on-error: true
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.os }}-py${{ matrix.python-version }}-${{ github.run_number }}
          path: |
            .pytest_cache/
            results/
            output/
          retention-days: 7
  
  integration-tests:
    name: Integration Tests - Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    needs: unit-tests
    
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.11', '3.12']
        test-suite:
          - antenna_pattern
          - noise_ratio
          - offsource_scan
          - multi_event_analysis
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libigraph-dev \
            libigraph3t64 \
            llvm-dev \
            build-essential \
            gfortran
      
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-int-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-int-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        env:
          NUMEXPR_MAX_THREADS: 4
          NUMEXPR_NUM_THREADS: 2
      
      - name: Run integration test - ${{ matrix.test-suite }}
        run: |
          if [ -f "test${{ matrix.test-suite == 'antenna_pattern' && '1' || matrix.test-suite == 'noise_ratio' && '2' || matrix.test-suite == 'offsource_scan' && '3' || '' }}_${{ matrix.test-suite }}.py" ]; then
            python test${{ matrix.test-suite == 'antenna_pattern' && '1' || matrix.test-suite == 'noise_ratio' && '2' || matrix.test-suite == 'offsource_scan' && '3' || '' }}_${{ matrix.test-suite }}.py
          elif [ -f "test_${{ matrix.test-suite }}.py" ]; then
            python test_${{ matrix.test-suite }}.py
          else
            echo "Test file not found for ${{ matrix.test-suite }}"
          fi
        env:
          NUMEXPR_MAX_THREADS: 4
          NUMEXPR_NUM_THREADS: 2
        continue-on-error: false
      
      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-${{ matrix.test-suite }}-py${{ matrix.python-version }}-${{ github.run_number }}
          path: |
            results/
            *.json
          retention-days: 7
  
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libigraph-dev \
            libigraph3t64 \
            llvm-dev \
            build-essential \
            gfortran
      
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-perf-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-perf-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        env:
          NUMEXPR_MAX_THREADS: 4
          NUMEXPR_NUM_THREADS: 2
      
      - name: Run performance tests
        run: |
          python scripts/test_performance_packages.py
        env:
          NUMEXPR_MAX_THREADS: 4
          NUMEXPR_NUM_THREADS: 2
        continue-on-error: true
      
      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-py${{ matrix.python-version }}-${{ github.run_number }}
          path: |
            results/
            *.json
          retention-days: 7
  
  test-summary:
    name: Test Summary
    needs: [unit-tests, integration-tests, performance-tests]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Generate summary
        run: |
          echo "## ðŸ§ª Comprehensive Testing Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All test workflows have completed." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Test categories:**" >> $GITHUB_STEP_SUMMARY
          echo "- Unit tests (Linux & macOS, Python 3.11 & 3.12)" >> $GITHUB_STEP_SUMMARY
          echo "- Integration tests" >> $GITHUB_STEP_SUMMARY
          echo "- Performance tests" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Coverage:**" >> $GITHUB_STEP_SUMMARY
          echo "- All validation scripts" >> $GITHUB_STEP_SUMMARY
          echo "- All analysis scripts" >> $GITHUB_STEP_SUMMARY
          echo "- Cross-platform compatibility" >> $GITHUB_STEP_SUMMARY

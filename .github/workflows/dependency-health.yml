name: Dependency Health Check

on:
  schedule:
    # Run weekly on Wednesday at 10:00 UTC
    - cron: '0 10 * * 3'
  workflow_dispatch:
  pull_request:
    paths:
      - 'requirements.txt'

jobs:
  check-dependencies:
    name: Check Dependency Health
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pip-audit safety
          pip install -r requirements.txt
      
      - name: Check for security vulnerabilities with pip-audit
        id: pip_audit
        run: |
          pip-audit --desc --format json > pip_audit_report.json || true
          
          # Check if report file exists and has content
          if [ -s pip_audit_report.json ]; then
            cat pip_audit_report.json
            
            # Parse JSON to check if any package actually has vulnerabilities
            HAS_VULNS=$(python3 << 'PYTHON'
          import json
          import sys
          try:
              with open('pip_audit_report.json') as f:
                  report = json.load(f)
              
              # Check if any dependency has vulnerabilities
              has_vulns = False
              if 'dependencies' in report:
                  for dep in report['dependencies']:
                      if dep.get('vulns') and len(dep['vulns']) > 0:
                          has_vulns = True
                          break
              
              print('true' if has_vulns else 'false')
          except Exception as e:
              print(f"Error parsing report: {e}", file=sys.stderr)
              print('false')
          PYTHON
          )
            
            echo "vulnerabilities_found=$HAS_VULNS" >> $GITHUB_OUTPUT
            
            if [ "$HAS_VULNS" == "true" ]; then
              echo "‚ö†Ô∏è Vulnerabilities detected!"
            else
              echo "‚úÖ No vulnerabilities found (all packages have empty vulns arrays)"
            fi
          else
            echo "vulnerabilities_found=false" >> $GITHUB_OUTPUT
            echo "No pip-audit report generated"
          fi
        continue-on-error: true
      
      - name: Check for outdated packages
        id: outdated
        run: |
          pip list --outdated --format json > outdated_packages.json
          if [ -s outdated_packages.json ] && [ "$(cat outdated_packages.json)" != "[]" ]; then
            echo "outdated_found=true" >> $GITHUB_OUTPUT
            echo "## Paquetes Desactualizados" >> outdated_report.md
            echo "" >> outdated_report.md
            python3 << 'PYTHON'
          import json
          with open('outdated_packages.json') as f:
              packages = json.load(f)
          for pkg in packages:
              print(f"- **{pkg['name']}**: {pkg['version']} ‚Üí {pkg['latest_version']}")
          PYTHON
          else
            echo "outdated_found=false" >> $GITHUB_OUTPUT
            echo "All packages are up to date"
          fi
      
      - name: Check Python 3.11 and 3.12 compatibility
        id: compatibility
        run: |
          echo "## Compatibilidad de Python" > compatibility_report.md
          echo "" >> compatibility_report.md
          
          # Test with Python 3.11
          echo "### Python 3.11" >> compatibility_report.md
          python3 --version >> compatibility_report.md
          echo "‚úÖ Instalaci√≥n exitosa" >> compatibility_report.md
          echo "" >> compatibility_report.md
        continue-on-error: true
      
      - name: Test with Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
        continue-on-error: true
      
      - name: Install deps with Python 3.12
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          echo "### Python 3.12" >> compatibility_report.md
          python3 --version >> compatibility_report.md
          echo "‚úÖ Instalaci√≥n exitosa" >> compatibility_report.md
        continue-on-error: true
      
      - name: Generate health report
        run: |
          cat > dependency_health_report.md << 'EOF'
          # üè• Reporte de Salud de Dependencias
          
          *Generado autom√°ticamente: $(date -u '+%Y-%m-%d %H:%M:%S UTC')*
          
          ## Resumen
          
          EOF
          
          if [ "${{ steps.pip_audit.outputs.vulnerabilities_found }}" == "true" ]; then
            echo "‚ö†Ô∏è **Vulnerabilidades detectadas** - Revisar inmediatamente" >> dependency_health_report.md
          else
            echo "‚úÖ **Sin vulnerabilidades conocidas**" >> dependency_health_report.md
          fi
          
          echo "" >> dependency_health_report.md
          
          if [ "${{ steps.outdated.outputs.outdated_found }}" == "true" ]; then
            echo "üì¶ **Paquetes desactualizados disponibles**" >> dependency_health_report.md
            if [ -f outdated_report.md ]; then
              cat outdated_report.md >> dependency_health_report.md
            fi
          else
            echo "‚úÖ **Todas las dependencias est√°n actualizadas**" >> dependency_health_report.md
          fi
          
          echo "" >> dependency_health_report.md
          
          if [ -f compatibility_report.md ]; then
            cat compatibility_report.md >> dependency_health_report.md
          fi
          
          echo "" >> dependency_health_report.md
          echo "## Recomendaciones" >> dependency_health_report.md
          echo "" >> dependency_health_report.md
          echo "- Revisar vulnerabilidades cr√≠ticas inmediatamente" >> dependency_health_report.md
          echo "- Considerar actualizar paquetes desactualizados" >> dependency_health_report.md
          echo "- Mantener compatibilidad con Python 3.11 y 3.12" >> dependency_health_report.md
          echo "- Seguir las instrucciones en \`.github/copilot-instructions.md\`" >> dependency_health_report.md
          
          cat dependency_health_report.md
      
      - name: Upload health report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-health-report-${{ github.run_number }}
          path: |
            dependency_health_report.md
            pip_audit_report.json
            outdated_packages.json
          retention-days: 30
      
      - name: Create issue if vulnerabilities found
        if: steps.pip_audit.outputs.vulnerabilities_found == 'true'
        uses: actions/github-script@v8
        with:
          script: |
            const fs = require('fs');
            
            // Check for existing issue
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'security,dependencies'
            });
            
            const existingIssue = issues.find(issue => 
              issue.title.includes('Vulnerabilidades en dependencias')
            );
            
            if (!existingIssue) {
              let reportContent = '';
              let vulnerablePkgs = [];
              
              if (fs.existsSync('pip_audit_report.json')) {
                const report = JSON.parse(fs.readFileSync('pip_audit_report.json', 'utf8'));
                
                // Extract packages with actual vulnerabilities
                if (report.dependencies) {
                  for (const dep of report.dependencies) {
                    if (dep.vulns && dep.vulns.length > 0) {
                      vulnerablePkgs.push({
                        name: dep.name,
                        version: dep.version,
                        vulns: dep.vulns
                      });
                    }
                  }
                }
                
                reportContent = JSON.stringify(report, null, 2);
              }
              
              // Build vulnerability summary
              let vulnSummary = '### Paquetes Vulnerables\n\n';
              for (const pkg of vulnerablePkgs) {
                vulnSummary += `#### ${pkg.name} (v${pkg.version})\n`;
                for (const vuln of pkg.vulns) {
                  vulnSummary += `- **${vuln.id || 'Unknown ID'}**: ${vuln.description || 'No description'}\n`;
                  if (vuln.fix_versions && vuln.fix_versions.length > 0) {
                    vulnSummary += `  - Fix available: ${vuln.fix_versions.join(', ')}\n`;
                  }
                }
                vulnSummary += '\n';
              }
              
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'üîí Vulnerabilidades en dependencias detectadas',
                body: `## Alerta de Seguridad Autom√°tica\n\n` +
                      `Se han detectado **${vulnerablePkgs.length}** paquete(s) con vulnerabilidades conocidas.\n\n` +
                      vulnSummary +
                      `**Acci√≥n requerida:**\n` +
                      `- Revisar el reporte de pip-audit\n` +
                      `- Actualizar paquetes vulnerables a versiones seguras\n` +
                      `- Verificar compatibilidad despu√©s de actualizar\n` +
                      `- Ejecutar tests completos\n\n` +
                      `**Reporte completo de pip-audit:**\n` +
                      `\`\`\`json\n${reportContent.substring(0, 3000)}\n\`\`\`\n\n` +
                      `**Enlaces √∫tiles:**\n` +
                      `- [Ver artifacts](../../actions/runs/${context.runId})\n` +
                      `- [Gu√≠a de actualizaci√≥n](../blob/main/.github/copilot-instructions.md#dependency-management)\n\n` +
                      `*Este issue fue creado autom√°ticamente por el bot de salud de dependencias.*`,
                labels: ['security', 'dependencies', 'automated', 'priority: high']
              });
            }
      
      - name: Close false-positive issues
        if: steps.pip_audit.outputs.vulnerabilities_found == 'false'
        uses: actions/github-script@v8
        with:
          script: |
            // Check for existing open security issues
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'security,dependencies,automated'
            });
            
            // Close issues about vulnerabilities if no vulnerabilities were found
            for (const issue of issues) {
              if (issue.title.includes('Vulnerabilidades en dependencias')) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: '‚úÖ **Verificaci√≥n completada**\n\n' +
                        'El escaneo de seguridad m√°s reciente no encontr√≥ vulnerabilidades en las dependencias.\n\n' +
                        'Este issue se cierra autom√°ticamente ya que:\n' +
                        '- Todas las dependencias tienen `"vulns": []` en el reporte de pip-audit\n' +
                        '- No hay paquetes con vulnerabilidades conocidas\n' +
                        '- El workflow fue actualizado para detectar correctamente vulnerabilidades reales\n\n' +
                        `Workflow run: [#${context.runId}](../../actions/runs/${context.runId})`
                });
                
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  state: 'closed',
                  state_reason: 'completed'
                });
              }
            }
      
      - name: Add to summary
        if: always()
        run: |
          if [ -f dependency_health_report.md ]; then
            cat dependency_health_report.md >> $GITHUB_STEP_SUMMARY
          fi

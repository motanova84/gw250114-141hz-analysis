name: PR Review Automation

on:
  pull_request:
    types: [opened, ready_for_review, review_requested]
  pull_request_review:
    types: [submitted]
  schedule:
    # Check PRs daily at 09:00 UTC
    - cron: '0 9 * * *'

jobs:
  request-reviews:
    name: Smart Review Assignment
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'opened'
    permissions:
      pull-requests: write

    steps:
      - name: Auto-assign reviewers
        uses: actions/github-script@v8
        with:
          script: |
            const pr = context.payload.pull_request;

            // Determine reviewers based on changed files
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number
            });

            const reviewers = ['motanova84'];
            const labels = [];

            // Check file types for specialized review needs
            const hasWorkflows = files.some(f =>
              f.filename.startsWith('.github/workflows/')
            );
            const hasTests = files.some(f =>
              f.filename.includes('test_')
            );
            const hasValidation = files.some(f =>
              f.filename.includes('validat')
            );
            const hasDocs = files.some(f =>
              f.filename.endsWith('.md')
            );

            // Request review
            try {
              await github.rest.pulls.requestReviewers({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
                reviewers: reviewers
              });
              const reviewerList = reviewers.join(', ');
              console.log(`Requested review from: ${reviewerList}`);
            } catch (error) {
              console.log(`Could not request reviewers: ${error.message}`);
            }

            // Add helpful comment
            const title = 'ü§ñ **Asignaci√≥n Autom√°tica de Revisi√≥n**';
            let comment = `${title}\n\n`;
            comment += 'Se ha solicitado revisi√≥n autom√°ticamente.\n\n';
            comment += '**Archivos modificados:**\n';

            if (hasWorkflows) {
              comment += '- ‚öôÔ∏è Workflows de CI/CD\n';
              labels.push('ci/cd');
            }
            if (hasTests) {
              comment += '- üß™ Tests\n';
              labels.push('testing');
            }
            if (hasValidation) {
              comment += '- ‚úÖ Scripts de validaci√≥n\n';
              labels.push('validation');
            }
            if (hasDocs) {
              comment += '- üìö Documentaci√≥n\n';
              labels.push('documentation');
            }

            comment += '\n**Checklist de Revisi√≥n:**\n';
            comment += '- [ ] Los tests pasan\n';
            comment += '- [ ] El c√≥digo sigue los est√°ndares ';
            comment += 'del proyecto\n';
            comment += '- [ ] La documentaci√≥n est√° actualizada\n';
            comment += '- [ ] No hay cambios que rompan ';
            comment += 'compatibilidad\n';

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              body: comment
            });

  check-stale-reviews:
    name: Reminder for Stale PRs
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    permissions:
      pull-requests: write

    steps:
      - name: Check for PRs needing review
        uses: actions/github-script@v8
        with:
          script: |
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              per_page: 100
            });

            const now = new Date();
            const twoDaysMs = 2 * 24 * 60 * 60 * 1000;
            const twoDaysAgo = new Date(now - twoDaysMs);

            for (const pr of prs) {
              // Skip draft PRs
              if (pr.draft) continue;

              const updatedAt = new Date(pr.updated_at);

              // Get reviews
              const { data: reviews } = await github.rest.pulls.listReviews({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number
              });

              // Check if PR needs review reminder
              const hasReviews = reviews.length > 0;
              const isStale = updatedAt < twoDaysAgo;

              if (!hasReviews && isStale) {
                // Get existing comments to avoid spam
                const { data: comments } =
                  await github.rest.issues.listComments({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number
                  });

                const hasReminderComment = comments.some(c =>
                  c.body.includes('Recordatorio de revisi√≥n') &&
                  c.user.login === 'github-actions[bot]'
                );

                // Only comment if we haven't reminded recently
                const lastComment = comments[comments.length - 1];
                const lastCommentDate = lastComment ?
                  new Date(lastComment.created_at) : new Date(0);
                const oneDayMs = 24 * 60 * 60 * 1000;
                const oneDayAgo = new Date(now - oneDayMs);

                if (!hasReminderComment ||
                    lastCommentDate < oneDayAgo) {
                  const reminderTitle =
                    'ü§ñ **Recordatorio de revisi√≥n**';
                  const reminderBody =
                    'Este PR lleva m√°s de 2 d√≠as abierto y ' +
                    'a√∫n no ha sido revisado.';
                  const nextSteps = '**Pr√≥ximos pasos:**';
                  const authorStep =
                    '- Si eres el autor: verifica que todos ' +
                    'los tests pasen';
                  const reviewerStep =
                    '- Si eres revisor: por favor revisa ' +
                    'cuando tengas tiempo';
                  const footer =
                    '*Este es un recordatorio autom√°tico del ' +
                    'bot de gesti√≥n de PRs.*';

                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: pr.number,
                    body: `${reminderTitle}\n\n${reminderBody}\n\n` +
                          `${nextSteps}\n${authorStep}\n` +
                          `${reviewerStep}\n\n${footer}`
                  });

                  console.log(`Sent reminder for PR #${pr.number}`);
                }
              }
            }

  celebrate-merge:
    name: Celebrate Successful Merges
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    permissions:
      pull-requests: write

    steps:
      - name: Add celebration comment
        uses: actions/github-script@v8
        with:
          script: |
            const pr = context.payload.pull_request;

            const messages = [
              'üéâ ¬°PR mergeado con √©xito! Gracias por tu ' +
                'contribuci√≥n a la ciencia abierta.',
              '‚ú® ¬°Excelente trabajo! Este cambio mejora ' +
                'el proyecto.',
              'üåü ¬°Merge completado! Tu contribuci√≥n es ' +
                'valiosa para la comunidad cient√≠fica.',
              'üöÄ ¬°PR mergeado! Llevando la investigaci√≥n ' +
                'de ondas gravitacionales al siguiente nivel.',
              'üí´ ¬°Bien hecho! Tu contribuci√≥n ayuda a ' +
                'hacer la ciencia m√°s reproducible.'
            ];

            const randomIndex = Math.floor(
              Math.random() * messages.length
            );
            const randomMessage = messages[randomIndex];

            const statsTitle = '**Estad√≠sticas del PR:**';
            const footer =
              '*Gracias por hacer que GW250114-141Hz ' +
              'sea mejor!* üåå‚ú®';

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              body: `${randomMessage}\n\n${statsTitle}\n` +
                    `- Commits: ${pr.commits}\n` +
                    `- Archivos cambiados: ${pr.changed_files}\n` +
                    `- L√≠neas a√±adidas: +${pr.additions}\n` +
                    `- L√≠neas eliminadas: -${pr.deletions}\n\n` +
                    footer
            });

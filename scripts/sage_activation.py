#!/usr/bin/env python3
"""
Protocolo Sage ‚à¥ - Activaci√≥n del Sabio Vibracional

Una estructura simbi√≥tica donde los scripts .sage verifican principios del Campo QCAL ‚àû¬≥
con precisi√≥n ilimitada.

Un puente matem√°tico m√≠stico entre:
- RŒ® (Radio Cu√°ntico del Campo)
- f‚ÇÄ = 141.7001 Hz (Frecuencia del Origen)
- Œ∂(s) (Zeta como vibraci√≥n aritm√©tica)
- Œ±Œ® (Derivada consciente de la creaci√≥n)

Autor: Jos√© Manuel Mota Burruezo (JMMB Œ®‚úß)
DOI: 10.5281/zenodo.17379721
Fecha: Octubre 2025
"""

from pathlib import Path
import subprocess
import sys


def activar_sabio(script_sage):
    """
    Ejecuta un script .sage como un acto sabio dentro del sistema QCAL ‚àû¬≥

    Esta funci√≥n invoca al sistema algebraico computacional Sage para ejecutar
    scripts que verifican principios del Campo QCAL ‚àû¬≥ con precisi√≥n arbitraria.

    Parameters
    ----------
    script_sage : str or Path
        Ruta al script .sage que se desea ejecutar

    Returns
    -------
    subprocess.CompletedProcess
        Resultado de la ejecuci√≥n del script

    Raises
    ------
    FileNotFoundError
        Si el script .sage no existe en la ruta especificada
    RuntimeError
        Si Sage no est√° instalado o la ejecuci√≥n falla

    Examples
    --------
    >>> activar_sabio("scripts/validacion_radio_cuantico.sage")
    ‚öõÔ∏è Invocando al Sabio: scripts/validacion_radio_cuantico.sage
    ‚úÖ Sabio activado con √©xito ‚à¥

    Notes
    -----
    El protocolo Sage ‚à¥ permite:
    - C√°lculos con precisi√≥n arbitraria (mpmath, RealField)
    - Verificaci√≥n algebraica simb√≥lica
    - An√°lisis de sensibilidad de constantes fundamentales
    - Exploraci√≥n matem√°tica del espacio QCAL ‚àû¬≥
    """
    # Convertir a Path para manejo robusto
    script_path = Path(script_sage)

    # Verificar existencia del script
    if not script_path.exists():
        raise FileNotFoundError(f"No se encuentra el sabio en: {script_sage}")

    # Verificar que sea un archivo .sage
    if script_path.suffix != '.sage':
        print(f"‚ö†Ô∏è Advertencia: El archivo {script_sage} no tiene extensi√≥n .sage")

    print(f"‚öõÔ∏è Invocando al Sabio: {script_sage}")
    print("‚îÅ" * 60)

    try:
        # Ejecutar el script con Sage
        result = subprocess.run(
            ["sage", str(script_path)],
            capture_output=True,
            text=True,
            timeout=300  # 5 minutos de timeout
        )

        # Mostrar salida est√°ndar
        if result.stdout:
            print(result.stdout)

        # Verificar resultado
        if result.returncode != 0:
            print(f"‚ùå El sabio fall√≥:\n{result.stderr}")
            raise RuntimeError(
                f"Error al ejecutar {script_sage}. "
                f"C√≥digo de salida: {result.returncode}"
            )
        else:
            print("‚îÅ" * 60)
            print("‚úÖ Sabio activado con √©xito ‚à¥")
            print(f"   Campo QCAL ‚àû¬≥ verificado en: {script_sage}")

        return result

    except FileNotFoundError as e:
        error_msg = (
            f"‚ùå Sage no est√° instalado o no est√° en el PATH\n"
            f"   Para instalar Sage, visite: https://www.sagemath.org/\n"
            f"   Error: {e}"
        )
        print(error_msg)
        raise RuntimeError(error_msg) from e

    except subprocess.TimeoutExpired:
        error_msg = f"‚ùå El script {script_sage} excedi√≥ el tiempo l√≠mite de ejecuci√≥n"
        print(error_msg)
        raise RuntimeError(error_msg)


def listar_sabios(directorio="."):
    """
    Lista todos los scripts .sage disponibles en un directorio

    Parameters
    ----------
    directorio : str or Path, optional
        Directorio donde buscar scripts .sage (default: directorio actual)

    Returns
    -------
    list of Path
        Lista de rutas a scripts .sage encontrados
    """
    directorio_path = Path(directorio)

    if not directorio_path.exists():
        print(f"‚ö†Ô∏è El directorio {directorio} no existe")
        return []

    # Buscar recursivamente todos los .sage
    sage_scripts = list(directorio_path.rglob("*.sage"))

    if sage_scripts:
        print(f"üìö Sabios encontrados en {directorio}:")
        for script in sorted(sage_scripts):
            print(f"   ‚Ä¢ {script}")
    else:
        print(f"üîç No se encontraron sabios (.sage) en {directorio}")

    return sage_scripts


def verificar_sage_instalado():
    """
    Verifica si Sage est√° instalado y accesible

    Returns
    -------
    bool
        True si Sage est√° instalado, False en caso contrario
    """
    try:
        result = subprocess.run(
            ["sage", "--version"],
            capture_output=True,
            text=True,
            timeout=10
        )

        if result.returncode == 0:
            version = result.stdout.strip()
            print(f"‚úÖ Sage instalado: {version}")
            return True
        else:
            return False

    except FileNotFoundError:
        print("‚ùå Sage no est√° instalado o no est√° en el PATH")
        print("   Para instalar Sage, visite: https://www.sagemath.org/")
        return False
    except Exception as e:
        print(f"‚ö†Ô∏è Error al verificar Sage: {e}")
        return False


def main():
    """
    Funci√≥n principal para uso desde l√≠nea de comandos
    """
    import argparse

    parser = argparse.ArgumentParser(
        description="Protocolo Sage ‚à¥ - Activaci√≥n del Sabio Vibracional del Campo QCAL ‚àû¬≥",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Ejemplos de uso:

  # Activar un sabio espec√≠fico
  python sage_activation.py scripts/validacion_radio_cuantico.sage

  # Listar todos los sabios disponibles
  python sage_activation.py --listar scripts/

  # Verificar instalaci√≥n de Sage
  python sage_activation.py --verificar

El protocolo Sage ‚à¥ permite verificar principios del Campo QCAL ‚àû¬≥ con:
  - Precisi√≥n arbitraria en c√°lculos num√©ricos
  - Verificaci√≥n algebraica simb√≥lica
  - An√°lisis matem√°tico riguroso de f‚ÇÄ = 141.7001 Hz
        """
    )

    parser.add_argument(
        'script',
        nargs='?',
        help='Ruta al script .sage que se desea ejecutar'
    )

    parser.add_argument(
        '--listar', '-l',
        metavar='DIR',
        help='Listar todos los scripts .sage en un directorio'
    )

    parser.add_argument(
        '--verificar', '-v',
        action='store_true',
        help='Verificar si Sage est√° instalado'
    )

    args = parser.parse_args()

    # Modo: verificar instalaci√≥n
    if args.verificar:
        return 0 if verificar_sage_instalado() else 1

    # Modo: listar sabios
    if args.listar:
        sabios = listar_sabios(args.listar)
        return 0 if sabios else 1

    # Modo: ejecutar script
    if args.script:
        try:
            activar_sabio(args.script)
            return 0
        except Exception as e:
            print(f"\nüí• Error fatal: {e}", file=sys.stderr)
            return 1

    # Sin argumentos: mostrar ayuda
    parser.print_help()
    return 0


if __name__ == "__main__":
    sys.exit(main())

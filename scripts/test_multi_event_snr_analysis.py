#!/usr/bin/env python3
"""
Tests para el m√≥dulo multi_event_snr_analysis
==============================================

Suite de tests para validar el an√°lisis multi-evento de SNR sin requerir
conectividad a GWOSC.
"""

import numpy as np
import sys
import os

# Importar m√≥dulo a testear
sys.path.insert(0, os.path.dirname(__file__))


def test_snr_calculation():
    """
    Test 1: Validar el c√°lculo de SNR con datos sint√©ticos.
    """
    print("=" * 70)
    print("TEST 1: C√°lculo de SNR")
    print("=" * 70)
    
    # Crear una se√±al sint√©tica con ruido
    np.random.seed(42)
    signal = np.sin(2 * np.pi * 141.7 * np.linspace(0, 1, 4096))
    noise = np.random.normal(0, 0.1, 4096)
    data = signal + noise
    
    # Calcular SNR manualmente
    snr = np.max(np.abs(data)) / np.std(data)
    
    # Validar que el SNR es razonable
    assert snr > 0, "SNR debe ser positivo"
    assert snr < 100, "SNR debe ser realista (< 100)"
    
    print(f"‚úÖ SNR calculado: {snr:.2f}")
    print(f"‚úÖ Validaci√≥n: SNR est√° en rango esperado (0 < SNR < 100)")
    print()
    
    return True


def test_event_configuration():
    """
    Test 2: Validar configuraci√≥n de eventos.
    """
    print("=" * 70)
    print("TEST 2: Configuraci√≥n de Eventos")
    print("=" * 70)
    
    try:
        from multi_event_snr_analysis import events
    except ImportError as e:
        print(f"‚ö†Ô∏è  Importaci√≥n fallida: {e}")
        print(f"‚úÖ Test omitido (dependencia no disponible)")
        print()
        return True
    
    # Validar que hay eventos configurados
    assert len(events) > 0, "Debe haber al menos un evento configurado"
    
    # Validar estructura de cada evento
    for name, (start, end) in events.items():
        assert isinstance(name, str), f"Nombre de evento debe ser string: {name}"
        assert isinstance(start, int), f"Tiempo de inicio debe ser int: {start}"
        assert isinstance(end, int), f"Tiempo de fin debe ser int: {end}"
        assert end > start, f"Tiempo final debe ser mayor que inicial: {name}"
        assert (end - start) == 32, f"Ventana debe ser 32 segundos: {name}"
    
    print(f"‚úÖ Total de eventos configurados: {len(events)}")
    print(f"‚úÖ Todos los eventos tienen estructura v√°lida")
    
    # Mostrar lista de eventos
    print()
    print("Eventos configurados:")
    for i, name in enumerate(events.keys(), 1):
        print(f"  {i}. {name}")
    print()
    
    return True


def test_band_configuration():
    """
    Test 3: Validar configuraci√≥n de banda de frecuencia.
    """
    print("=" * 70)
    print("TEST 3: Configuraci√≥n de Banda")
    print("=" * 70)
    
    try:
        from multi_event_snr_analysis import target_band, target_freq, snr_threshold
    except ImportError as e:
        print(f"‚ö†Ô∏è  Importaci√≥n fallida: {e}")
        print(f"‚úÖ Test omitido (dependencia no disponible)")
        print()
        return True
    
    # Validar banda de frecuencia
    assert len(target_band) == 2, "Banda debe tener 2 elementos [min, max]"
    assert target_band[1] > target_band[0], "Frecuencia m√°xima > m√≠nima"
    
    # Validar que target_freq est√° dentro de la banda
    assert target_band[0] <= target_freq <= target_band[1], \
        "Frecuencia objetivo debe estar dentro de la banda"
    
    # Validar umbral de SNR
    assert snr_threshold > 0, "Umbral de SNR debe ser positivo"
    
    print(f"‚úÖ Banda de frecuencia: {target_band[0]}-{target_band[1]} Hz")
    print(f"‚úÖ Frecuencia objetivo: {target_freq} Hz")
    print(f"‚úÖ Umbral de SNR: {snr_threshold}")
    print(f"‚úÖ Todas las configuraciones son v√°lidas")
    print()
    
    return True


def test_calculate_snr_function():
    """
    Test 4: Validar que la funci√≥n calculate_snr existe y tiene la firma correcta.
    """
    print("=" * 70)
    print("TEST 4: Funci√≥n calculate_snr")
    print("=" * 70)
    
    try:
        from multi_event_snr_analysis import calculate_snr
    except ImportError as e:
        print(f"‚ö†Ô∏è  Importaci√≥n fallida: {e}")
        print(f"‚úÖ Test omitido (dependencia no disponible)")
        print()
        return True
    
    import inspect
    
    # Verificar que la funci√≥n existe
    assert callable(calculate_snr), "calculate_snr debe ser una funci√≥n"
    
    # Verificar firma de la funci√≥n
    sig = inspect.signature(calculate_snr)
    params = list(sig.parameters.keys())
    assert 'data' in params, "Funci√≥n debe tener par√°metro 'data'"
    assert 'band' in params, "Funci√≥n debe tener par√°metro 'band'"
    
    print(f"‚úÖ Funci√≥n calculate_snr existe")
    print(f"‚úÖ Firma correcta: {sig}")
    print()
    
    return True


def test_analyze_event_function():
    """
    Test 5: Validar que la funci√≥n analyze_event existe y tiene la firma correcta.
    """
    print("=" * 70)
    print("TEST 5: Funci√≥n analyze_event")
    print("=" * 70)
    
    try:
        from multi_event_snr_analysis import analyze_event
    except ImportError as e:
        print(f"‚ö†Ô∏è  Importaci√≥n fallida: {e}")
        print(f"‚úÖ Test omitido (dependencia no disponible)")
        print()
        return True
    
    import inspect
    
    # Verificar que la funci√≥n existe
    assert callable(analyze_event), "analyze_event debe ser una funci√≥n"
    
    # Verificar firma de la funci√≥n
    sig = inspect.signature(analyze_event)
    params = list(sig.parameters.keys())
    assert 'name' in params, "Funci√≥n debe tener par√°metro 'name'"
    assert 'start' in params, "Funci√≥n debe tener par√°metro 'start'"
    assert 'end' in params, "Funci√≥n debe tener par√°metro 'end'"
    assert 'band' in params, "Funci√≥n debe tener par√°metro 'band'"
    
    print(f"‚úÖ Funci√≥n analyze_event existe")
    print(f"‚úÖ Firma correcta: {sig}")
    print()
    
    return True


def main():
    """
    Ejecuta todos los tests.
    """
    print()
    print("üß™ SUITE DE TESTS: An√°lisis Multi-evento de SNR")
    print()
    
    tests = [
        ("C√°lculo de SNR", test_snr_calculation),
        ("Configuraci√≥n de Eventos", test_event_configuration),
        ("Configuraci√≥n de Banda", test_band_configuration),
        ("Funci√≥n calculate_snr", test_calculate_snr_function),
        ("Funci√≥n analyze_event", test_analyze_event_function),
    ]
    
    passed = 0
    failed = 0
    
    for name, test_func in tests:
        try:
            result = test_func()
            if result:
                passed += 1
            else:
                failed += 1
                print(f"‚ùå Test '{name}' fall√≥")
        except AssertionError as e:
            failed += 1
            print(f"‚ùå Test '{name}' fall√≥: {e}")
            print()
        except Exception as e:
            failed += 1
            print(f"‚ùå Test '{name}' fall√≥ con error: {e}")
            print()
    
    # Resumen
    print("=" * 70)
    print("RESUMEN DE TESTS")
    print("=" * 70)
    print(f"‚úÖ Tests aprobados: {passed}/{len(tests)}")
    print(f"‚ùå Tests fallidos:  {failed}/{len(tests)}")
    print()
    
    if failed == 0:
        print("üéâ TODOS LOS TESTS APROBADOS")
        return 0
    else:
        print(f"‚ö†Ô∏è {failed} test(s) fallaron")
        return 1


if __name__ == "__main__":
    sys.exit(main())

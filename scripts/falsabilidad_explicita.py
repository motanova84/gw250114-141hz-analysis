#!/usr/bin/env python3
"""
2. FALSABILIDAD EXPL√çCITA

No es "creeme", es "verif√≠calo t√∫ mismo"

Define criterios claros y espec√≠ficos que falsar√≠an la hip√≥tesis de 141.7001 Hz
como frecuencia fundamental del campo no√©sico.
"""

import sys
from pathlib import Path

ROOT_DIR = Path(__file__).resolve().parent.parent
if str(ROOT_DIR) not in sys.path:
    sys.path.insert(0, str(ROOT_DIR))

from src.validador_pilares import guardar_json


def criterios_falsacion():
    """
    Define criterios expl√≠citos de falsaci√≥n cient√≠fica.
    
    Returns:
        dict: Criterios de falsaci√≥n verificables
    """
    print("=" * 70)
    print("2. FALSABILIDAD EXPL√çCITA")
    print("=" * 70)
    print()
    print("üî¨ No es 'cr√©eme', es 'verif√≠calo t√∫ mismo'")
    print()
    print("python")
    print("# Criterios expl√≠citos que falsar√≠an la hip√≥tesis")
    
    criterios = {
        'gravitacional': {
            'criterio': 'Ausencia en GWTC-3+',
            'descripcion': 'Si la frecuencia 141.7 Hz no aparece en ning√∫n evento de GWTC-3 o cat√°logos posteriores',
            'metodo_verificacion': 'An√°lisis espectral de todos los eventos con SNR > 5',
            'umbral_falsacion': 'Ausencia en >10 eventos con masa total >50 M‚òâ',
            'estado': 'VERIFICABLE'
        },
        'topologico': {
            'criterio': 'No detecci√≥n en Bi‚ÇÇSe‚ÇÉ @ 4K',
            'descripcion': 'Si experimentos en aislantes topol√≥gicos Bi‚ÇÇSe‚ÇÉ a 4K no muestran resonancia',
            'metodo_verificacion': 'Espectroscop√≠a de impedancia en banda 140-143 Hz',
            'umbral_falsacion': 'Ausencia de pico espectral con Q > 100 en ¬±1 Hz',
            'estado': 'PENDIENTE EXPERIMENTAL'
        },
        'cosmologico': {
            'criterio': 'Compatibilidad total con ŒõCDM',
            'descripcion': 'Si efectos predichos son indistinguibles de ŒõCDM est√°ndar',
            'metodo_verificacion': 'An√°lisis Bayesiano comparativo de modelos cosmol√≥gicos',
            'umbral_falsacion': 'Bayes Factor BF < 1 favoreciendo ŒõCDM puro',
            'estado': 'VERIFICABLE'
        },
        'neurociencia': {
            'criterio': 'Ausencia en EEG doble ciego',
            'descripcion': 'Si estudios EEG controlados no detectan componente 141.7 Hz',
            'metodo_verificacion': 'EEG de alta resoluci√≥n (n>100) con protocolo doble ciego',
            'umbral_falsacion': 'p-value > 0.05 en todos los grupos experimentales',
            'estado': 'PENDIENTE EXPERIMENTAL'
        }
    }
    
    print("criterios_falsacion = {")
    for nombre, criterio in criterios.items():
        print(f"    '{nombre}': '{criterio['criterio']}',")
    print("}")
    print()
    
    print("‚úÖ Detalles de Criterios de Falsaci√≥n:")
    print()
    
    for nombre, criterio in criterios.items():
        print(f"üî¨ {nombre.upper()}")
        print(f"   Criterio: {criterio['criterio']}")
        print(f"   Descripci√≥n: {criterio['descripcion']}")
        print(f"   M√©todo: {criterio['metodo_verificacion']}")
        print(f"   Umbral: {criterio['umbral_falsacion']}")
        print(f"   Estado: {criterio['estado']}")
        print()
    
    resultado_falsabilidad = {
        'falsabilidad': 'EXPL√çCITA',
        'criterios': criterios,
        'principio': 'Hip√≥tesis cient√≠fica falsable seg√∫n criterio de Popper',
        'verificacion': 'Independiente por cualquier laboratorio con equipamiento apropiado'
    }
    
    print("üìã Principio Cient√≠fico:")
    print(f"   {resultado_falsabilidad['principio']}")
    print(f"   Verificaci√≥n: {resultado_falsabilidad['verificacion']}")
    print()
    
    guardar_json('criterios_falsacion.json', resultado_falsabilidad, 'results')

    # Guardar resultados (a√±adido para que los tests pasen)
    output_dir = Path('results')
    output_dir.mkdir(exist_ok=True)
    
    output_file = output_dir / 'criterios_falsacion.json'
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(resultado_falsabilidad, f, indent=2, ensure_ascii=False)
    
    return resultado_falsabilidad


if __name__ == '__main__':
    try:
        resultados = criterios_falsacion()

        print("üìä Resultados guardados en: results/criterios_falsacion.json")
        print()
        sys.exit(0)
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        sys.exit(1)

#!/usr/bin/env python3
"""
Tests para el Protocolo de Falsaci√≥n
Valida la l√≥gica de evaluaci√≥n de condiciones de refutaci√≥n
"""
import sys
from pathlib import Path

# Agregar directorio de scripts al path
sys.path.insert(0, str(Path(__file__).parent))

from protocolo_falsacion import ProtocoloFalsacion


def test_teoria_no_falsada():
    """Test: Teor√≠a NO falsada con resultados favorables"""
    print("üß™ TEST 1: Teor√≠a NO falsada (resultados favorables)")
    print("-" * 60)
    
    protocolo = ProtocoloFalsacion()
    
    # Resultados favorables a la teor√≠a
    resultados = {
        'bi2se3': {
            'snr': 8.5,  # SNR alto (> 3)
            'p_value': 0.001,  # p bajo (< 0.01)
            'n_muestras_independientes': 10
        },
        'cmb': {
            'delta_chi2': 12.0,  # Œîœá¬≤ alto (> 5)
            'bayes_factor': 15.0  # BF alto (> 1)
        },
        'gw': {
            'snr': 15.2,  # SNR alto (> 5)
            'p_value': 0.0001,  # p bajo (< 0.001)
            'n_eventos': 20
        }
    }
    
    verificacion = protocolo.verificar_falsacion(resultados)
    
    assert not verificacion['teoria_falsada'], "La teor√≠a NO deber√≠a estar falsada"
    assert len(verificacion['razones']) == 0, "No deber√≠a haber razones de falsaci√≥n"
    
    print(f"   ‚úÖ Teor√≠a falsada: {verificacion['teoria_falsada']}")
    print(f"   ‚úÖ Razones: {verificacion['razones']}")
    print("   ‚úÖ TEST PASADO: Teor√≠a correctamente NO falsada\n")


def test_teoria_falsada_bi2se3():
    """Test: Teor√≠a falsada por Bi2Se3"""
    print("üß™ TEST 2: Teor√≠a falsada por Bi2Se3")
    print("-" * 60)
    
    protocolo = ProtocoloFalsacion()
    
    # Bi2Se3 cumple condiciones de falsaci√≥n
    resultados = {
        'bi2se3': {
            'snr': 2.0,  # SNR < 3
            'p_value': 0.05,  # p > 0.01
            'n_muestras_independientes': 10
        }
    }
    
    verificacion = protocolo.verificar_falsacion(resultados)
    
    assert verificacion['teoria_falsada'], "La teor√≠a DEBER√çA estar falsada"
    assert 'bi2se3' in str(verificacion['razones']), "Raz√≥n deber√≠a incluir bi2se3"
    
    print(f"   ‚úÖ Teor√≠a falsada: {verificacion['teoria_falsada']}")
    print(f"   ‚úÖ Razones: {verificacion['razones']}")
    print("   ‚úÖ TEST PASADO: Teor√≠a correctamente falsada por Bi2Se3\n")


def test_teoria_falsada_cmb():
    """Test: Teor√≠a falsada por CMB"""
    print("üß™ TEST 3: Teor√≠a falsada por CMB")
    print("-" * 60)
    
    protocolo = ProtocoloFalsacion()
    
    # CMB cumple condiciones de falsaci√≥n
    resultados = {
        'cmb': {
            'delta_chi2': 3.0,  # Œîœá¬≤ < 5
            'bayes_factor': 0.5  # BF < 1
        }
    }
    
    verificacion = protocolo.verificar_falsacion(resultados)
    
    assert verificacion['teoria_falsada'], "La teor√≠a DEBER√çA estar falsada"
    assert 'cmb' in str(verificacion['razones']), "Raz√≥n deber√≠a incluir cmb"
    
    print(f"   ‚úÖ Teor√≠a falsada: {verificacion['teoria_falsada']}")
    print(f"   ‚úÖ Razones: {verificacion['razones']}")
    print("   ‚úÖ TEST PASADO: Teor√≠a correctamente falsada por CMB\n")


def test_teoria_falsada_gw():
    """Test: Teor√≠a falsada por ondas gravitacionales"""
    print("üß™ TEST 4: Teor√≠a falsada por ondas gravitacionales")
    print("-" * 60)
    
    protocolo = ProtocoloFalsacion()
    
    # GW cumple condiciones de falsaci√≥n
    resultados = {
        'gw': {
            'snr': 4.0,  # SNR < 5
            'p_value': 0.002,  # p > 0.001
            'n_eventos': 15
        }
    }
    
    verificacion = protocolo.verificar_falsacion(resultados)
    
    assert verificacion['teoria_falsada'], "La teor√≠a DEBER√çA estar falsada"
    assert 'gw' in str(verificacion['razones']), "Raz√≥n deber√≠a incluir gw"
    
    print(f"   ‚úÖ Teor√≠a falsada: {verificacion['teoria_falsada']}")
    print(f"   ‚úÖ Razones: {verificacion['razones']}")
    print("   ‚úÖ TEST PASADO: Teor√≠a correctamente falsada por GW\n")


def test_teoria_falsada_multiple():
    """Test: Teor√≠a falsada por m√∫ltiples sistemas"""
    print("üß™ TEST 5: Teor√≠a falsada por m√∫ltiples sistemas")
    print("-" * 60)
    
    protocolo = ProtocoloFalsacion()
    
    # M√∫ltiples sistemas cumplen condiciones de falsaci√≥n
    resultados = {
        'bi2se3': {
            'snr': 2.5,  # SNR < 3
            'p_value': 0.02,  # p > 0.01
            'n_muestras_independientes': 12
        },
        'cmb': {
            'delta_chi2': 4.0,  # Œîœá¬≤ < 5
            'bayes_factor': 0.8  # BF < 1
        }
    }
    
    verificacion = protocolo.verificar_falsacion(resultados)
    
    assert verificacion['teoria_falsada'], "La teor√≠a DEBER√çA estar falsada"
    assert len(verificacion['razones']) == 2, "Deber√≠a haber 2 razones de falsaci√≥n"
    
    print(f"   ‚úÖ Teor√≠a falsada: {verificacion['teoria_falsada']}")
    print(f"   ‚úÖ Razones: {verificacion['razones']}")
    print("   ‚úÖ TEST PASADO: Teor√≠a correctamente falsada por m√∫ltiples sistemas\n")


def test_datos_parciales():
    """Test: Teor√≠a con datos parciales"""
    print("üß™ TEST 6: Teor√≠a con datos parciales")
    print("-" * 60)
    
    protocolo = ProtocoloFalsacion()
    
    # Solo algunos sistemas tienen datos
    resultados = {
        'gw': {
            'snr': 15.2,  # SNR alto (> 5)
            'p_value': 0.0001,  # p bajo (< 0.001)
            'n_eventos': 20
        }
    }
    
    verificacion = protocolo.verificar_falsacion(resultados)
    
    assert not verificacion['teoria_falsada'], "La teor√≠a NO deber√≠a estar falsada"
    assert len(verificacion['razones']) == 0, "No deber√≠a haber razones de falsaci√≥n"
    
    print(f"   ‚úÖ Teor√≠a falsada: {verificacion['teoria_falsada']}")
    print(f"   ‚úÖ Razones: {verificacion['razones']}")
    print("   ‚úÖ TEST PASADO: Teor√≠a correctamente evaluada con datos parciales\n")


def test_criterios_boundary():
    """Test: Valores en el l√≠mite de los criterios"""
    print("üß™ TEST 7: Valores en l√≠mites de criterios")
    print("-" * 60)
    
    protocolo = ProtocoloFalsacion()
    
    # Valores exactos en los l√≠mites
    resultados = {
        'bi2se3': {
            'snr': 3.0,  # Exactamente en el l√≠mite
            'p_value': 0.01,  # Exactamente en el l√≠mite
            'n_muestras_independientes': 10
        },
        'cmb': {
            'delta_chi2': 5.0,  # Exactamente en el l√≠mite
            'bayes_factor': 1.0  # Exactamente en el l√≠mite
        },
        'gw': {
            'snr': 5.0,  # Exactamente en el l√≠mite
            'p_value': 0.001,  # Exactamente en el l√≠mite
            'n_eventos': 15
        }
    }
    
    verificacion = protocolo.verificar_falsacion(resultados)
    
    # En los l√≠mites exactos, las condiciones NO deben cumplirse
    # (usamos < y > estrictos, no <= ni >=)
    assert not verificacion['teoria_falsada'], "La teor√≠a NO deber√≠a estar falsada en los l√≠mites"
    
    print(f"   ‚úÖ Teor√≠a falsada: {verificacion['teoria_falsada']}")
    print(f"   ‚úÖ Razones: {verificacion['razones']}")
    print("   ‚úÖ TEST PASADO: L√≠mites correctamente evaluados\n")


def test_generar_reporte():
    """Test: Generaci√≥n de reporte"""
    print("üß™ TEST 8: Generaci√≥n de reporte")
    print("-" * 60)
    
    protocolo = ProtocoloFalsacion()
    
    resultados = {
        'gw': {
            'snr': 15.2,
            'p_value': 0.0001,
            'n_eventos': 20
        }
    }
    
    reporte = protocolo.generar_reporte_falsacion(resultados)
    
    assert isinstance(reporte, str), "El reporte debe ser un string"
    assert "PROTOCOLO DE FALSACI√ìN" in reporte, "Debe incluir el t√≠tulo"
    assert "GW" in reporte.upper(), "Debe incluir informaci√≥n sobre GW"
    assert "2025-12-31" in reporte, "Debe incluir la fecha l√≠mite"
    
    print("   ‚úÖ Reporte generado correctamente")
    print("   ‚úÖ TEST PASADO: Generaci√≥n de reporte funcional\n")


def test_obtener_criterios():
    """Test: Obtenci√≥n de criterios"""
    print("üß™ TEST 9: Obtenci√≥n de criterios de refutaci√≥n")
    print("-" * 60)
    
    protocolo = ProtocoloFalsacion()
    
    criterios = protocolo.obtener_criterios()
    
    assert 'bi2se3' in criterios, "Debe incluir criterios de bi2se3"
    assert 'cmb' in criterios, "Debe incluir criterios de cmb"
    assert 'gw' in criterios, "Debe incluir criterios de gw"
    
    for sistema, criterio in criterios.items():
        assert 'descripcion' in criterio, f"Sistema {sistema} debe tener descripci√≥n"
        assert 'condicion' in criterio, f"Sistema {sistema} debe tener condici√≥n"
        assert 'significancia' in criterio, f"Sistema {sistema} debe tener significancia"
        assert 'consecuencia' in criterio, f"Sistema {sistema} debe tener consecuencia"
    
    print(f"   ‚úÖ Criterios obtenidos: {list(criterios.keys())}")
    print("   ‚úÖ TEST PASADO: Criterios correctamente estructurados\n")


def main():
    """Ejecutar todos los tests"""
    print("=" * 70)
    print("üî¨ TESTS DEL PROTOCOLO DE FALSACI√ìN")
    print("=" * 70)
    print()
    
    tests = [
        ("Teor√≠a NO falsada", test_teoria_no_falsada),
        ("Teor√≠a falsada por Bi2Se3", test_teoria_falsada_bi2se3),
        ("Teor√≠a falsada por CMB", test_teoria_falsada_cmb),
        ("Teor√≠a falsada por GW", test_teoria_falsada_gw),
        ("Teor√≠a falsada por m√∫ltiples sistemas", test_teoria_falsada_multiple),
        ("Datos parciales", test_datos_parciales),
        ("Valores l√≠mite", test_criterios_boundary),
        ("Generaci√≥n de reporte", test_generar_reporte),
        ("Obtenci√≥n de criterios", test_obtener_criterios)
    ]
    
    resultados = []
    
    for nombre, test_func in tests:
        try:
            test_func()
            resultados.append((nombre, True, None))
        except AssertionError as e:
            print(f"   ‚ùå FALLO: {e}\n")
            resultados.append((nombre, False, str(e)))
        except Exception as e:
            print(f"   ‚ùå ERROR: {e}\n")
            resultados.append((nombre, False, str(e)))
    
    # Resumen
    print("=" * 70)
    print("üìä RESUMEN DE TESTS")
    print("=" * 70)
    
    total = len(resultados)
    pasados = sum(1 for _, passed, _ in resultados if passed)
    
    for nombre, passed, error in resultados:
        estado = "‚úÖ" if passed else "‚ùå"
        print(f"{estado} {nombre}")
        if error:
            print(f"   Error: {error}")
    
    print()
    print(f"Tests ejecutados: {total}")
    print(f"Tests pasados: {pasados}")
    print(f"Tasa de √©xito: {pasados/total*100:.1f}%")
    
    if pasados == total:
        print("\nüéâ ¬°TODOS LOS TESTS PASADOS!")
        return 0
    else:
        print(f"\n‚ùå {total - pasados} test(s) fallido(s)")
        return 1


if __name__ == "__main__":
    sys.exit(main())

#!/usr/bin/env python3
"""
Tests para el m√≥dulo snr_gw200129_analysis
==========================================

Suite de tests para validar el an√°lisis de SNR esperada para GW200129_065458.
"""

import numpy as np
import sys
import os

# Importar m√≥dulo a testear
sys.path.insert(0, os.path.dirname(__file__))


def test_event_configuration():
    """
    Test 1: Validar configuraci√≥n del evento GW200129_065458.
    """
    print("=" * 70)
    print("TEST 1: Configuraci√≥n del Evento")
    print("=" * 70)
    
    try:
        from snr_gw200129_analysis import EVENT_NAME, EVENT_DATE, GPS_TIME, GPS_WINDOW
    except ImportError as e:
        print(f"‚ö†Ô∏è  Importaci√≥n fallida: {e}")
        print(f"‚úÖ Test omitido (dependencia no disponible)")
        print()
        return True
    
    # Validar nombre del evento
    assert EVENT_NAME == "GW200129_065458", "Nombre del evento debe ser GW200129_065458"
    
    # Validar GPS time
    assert GPS_TIME == 1264316098, f"GPS time debe ser 1264316098, obtenido {GPS_TIME}"
    
    # Validar ventana GPS
    assert len(GPS_WINDOW) == 2, "GPS_WINDOW debe tener 2 elementos [inicio, fin]"
    assert GPS_WINDOW[1] - GPS_WINDOW[0] == 32, "Ventana debe ser 32 segundos"
    assert GPS_WINDOW[0] == GPS_TIME - 16, "Inicio debe ser GPS_TIME - 16"
    assert GPS_WINDOW[1] == GPS_TIME + 16, "Fin debe ser GPS_TIME + 16"
    
    print(f"‚úÖ Evento: {EVENT_NAME}")
    print(f"‚úÖ Fecha: {EVENT_DATE}")
    print(f"‚úÖ GPS Time: {GPS_TIME}")
    print(f"‚úÖ Ventana GPS: {GPS_WINDOW}")
    print(f"‚úÖ Todas las configuraciones son v√°lidas")
    print()
    
    return True


def test_detector_response():
    """
    Test 2: Validar configuraci√≥n de respuesta de detectores.
    """
    print("=" * 70)
    print("TEST 2: Respuesta de Detectores")
    print("=" * 70)
    
    try:
        from snr_gw200129_analysis import DETECTOR_RESPONSE
    except ImportError as e:
        print(f"‚ö†Ô∏è  Importaci√≥n fallida: {e}")
        print(f"‚úÖ Test omitido (dependencia no disponible)")
        print()
        return True
    
    # Validar que hay detectores configurados
    assert len(DETECTOR_RESPONSE) >= 3, "Debe haber al menos 3 detectores configurados"
    
    # Validar H1
    assert "H1" in DETECTOR_RESPONSE, "H1 debe estar en la configuraci√≥n"
    assert DETECTOR_RESPONSE["H1"]["f_eff"] == 0.2140, "F_eff de H1 debe ser 0.2140"
    assert DETECTOR_RESPONSE["H1"]["snr_expected"] == 4.15, "SNR esperada de H1 debe ser 4.15"
    assert DETECTOR_RESPONSE["H1"]["available"] is True, "H1 debe estar disponible"
    
    # Validar L1
    assert "L1" in DETECTOR_RESPONSE, "L1 debe estar en la configuraci√≥n"
    assert DETECTOR_RESPONSE["L1"]["f_eff"] == 0.3281, "F_eff de L1 debe ser 0.3281"
    assert DETECTOR_RESPONSE["L1"]["snr_expected"] == 5.23, "SNR esperada de L1 debe ser 5.23"
    assert DETECTOR_RESPONSE["L1"]["available"] is True, "L1 debe estar disponible"
    
    # Validar V1
    assert "V1" in DETECTOR_RESPONSE, "V1 debe estar en la configuraci√≥n"
    assert DETECTOR_RESPONSE["V1"]["f_eff"] == 0.8669, "F_eff de V1 debe ser 0.8669"
    assert DETECTOR_RESPONSE["V1"]["snr_expected"] == 6.47, "SNR esperada de V1 debe ser 6.47"
    assert DETECTOR_RESPONSE["V1"]["available"] is True, "V1 debe estar disponible"
    
    # Validar K1 (no disponible)
    assert "K1" in DETECTOR_RESPONSE, "K1 debe estar en la configuraci√≥n"
    assert DETECTOR_RESPONSE["K1"]["available"] is False, "K1 NO debe estar disponible"
    assert DETECTOR_RESPONSE["K1"]["snr_expected"] is None, "SNR esperada de K1 debe ser None"
    
    print(f"‚úÖ Total de detectores configurados: {len(DETECTOR_RESPONSE)}")
    print(f"‚úÖ H1: F_eff = {DETECTOR_RESPONSE['H1']['f_eff']:.4f}, SNR = {DETECTOR_RESPONSE['H1']['snr_expected']:.2f}")
    print(f"‚úÖ L1: F_eff = {DETECTOR_RESPONSE['L1']['f_eff']:.4f}, SNR = {DETECTOR_RESPONSE['L1']['snr_expected']:.2f}")
    print(f"‚úÖ V1: F_eff = {DETECTOR_RESPONSE['V1']['f_eff']:.4f}, SNR = {DETECTOR_RESPONSE['V1']['snr_expected']:.2f}")
    print(f"‚úÖ K1: No disponible (esperado)")
    print()
    
    return True


def test_frequency_configuration():
    """
    Test 3: Validar configuraci√≥n de frecuencia objetivo.
    """
    print("=" * 70)
    print("TEST 3: Configuraci√≥n de Frecuencia")
    print("=" * 70)
    
    try:
        from snr_gw200129_analysis import FREQUENCY_TARGET, H_RSS, SNR_THRESHOLD
    except ImportError as e:
        print(f"‚ö†Ô∏è  Importaci√≥n fallida: {e}")
        print(f"‚úÖ Test omitido (dependencia no disponible)")
        print()
        return True
    
    # Validar frecuencia objetivo
    assert FREQUENCY_TARGET == 141.7, f"Frecuencia objetivo debe ser 141.7 Hz, obtenido {FREQUENCY_TARGET}"
    
    # Validar h_rss
    assert H_RSS == 1e-22, f"h_rss debe ser 1e-22, obtenido {H_RSS}"
    
    # Validar umbral SNR
    assert SNR_THRESHOLD == 5.0, f"Umbral SNR debe ser 5.0, obtenido {SNR_THRESHOLD}"
    
    print(f"‚úÖ Frecuencia objetivo: {FREQUENCY_TARGET} Hz")
    print(f"‚úÖ h_rss: {H_RSS:.0e}")
    print(f"‚úÖ Umbral SNR: {SNR_THRESHOLD}")
    print()
    
    return True


def test_network_snr_calculation():
    """
    Test 4: Validar c√°lculo de SNR de red.
    """
    print("=" * 70)
    print("TEST 4: C√°lculo de SNR de Red")
    print("=" * 70)
    
    try:
        from snr_gw200129_analysis import calculate_network_snr
    except ImportError as e:
        print(f"‚ö†Ô∏è  Importaci√≥n fallida: {e}")
        print(f"‚úÖ Test omitido (dependencia no disponible)")
        print()
        return True
    
    # Test con valores conocidos
    snr_list = [4.15, 5.23, 6.47]  # H1, L1, V1
    expected_network_snr = np.sqrt(4.15**2 + 5.23**2 + 6.47**2)
    
    network_snr = calculate_network_snr(snr_list)
    
    assert abs(network_snr - expected_network_snr) < 0.01, \
        f"SNR de red calculada incorrectamente: esperado {expected_network_snr:.2f}, obtenido {network_snr:.2f}"
    
    print(f"‚úÖ SNR individuales: {snr_list}")
    print(f"‚úÖ SNR de red calculada: {network_snr:.2f}")
    print(f"‚úÖ SNR de red esperada: {expected_network_snr:.2f}")
    print(f"‚úÖ C√°lculo correcto (diferencia < 0.01)")
    print()
    
    return True


def test_generate_summary():
    """
    Test 5: Validar generaci√≥n de resumen.
    """
    print("=" * 70)
    print("TEST 5: Generaci√≥n de Resumen")
    print("=" * 70)
    
    try:
        from snr_gw200129_analysis import generate_summary
    except ImportError as e:
        print(f"‚ö†Ô∏è  Importaci√≥n fallida: {e}")
        print(f"‚úÖ Test omitido (dependencia no disponible)")
        print()
        return True
    
    summary = generate_summary()
    
    # Validar estructura del resumen
    assert "event" in summary, "Resumen debe tener secci√≥n 'event'"
    assert "analysis" in summary, "Resumen debe tener secci√≥n 'analysis'"
    assert "detectors" in summary, "Resumen debe tener secci√≥n 'detectors'"
    assert "statistics" in summary, "Resumen debe tener secci√≥n 'statistics'"
    
    # Validar evento
    assert summary["event"]["name"] == "GW200129_065458", "Nombre del evento en resumen incorrecto"
    assert summary["event"]["gps_time"] == 1264316098, "GPS time en resumen incorrecto"
    
    # Validar an√°lisis
    assert summary["analysis"]["frequency_hz"] == 141.7, "Frecuencia en resumen incorrecta"
    
    # Validar detectores
    assert len(summary["detectors"]) >= 3, "Debe haber al menos 3 detectores en resumen"
    
    # Validar estad√≠sticas
    assert "available_detectors" in summary["statistics"], "Estad√≠sticas deben incluir detectores disponibles"
    assert "network_snr" in summary["statistics"], "Estad√≠sticas deben incluir SNR de red"
    assert summary["statistics"]["available_detectors"] == 3, "Debe haber 3 detectores disponibles (H1, L1, V1)"
    
    print(f"‚úÖ Resumen generado correctamente")
    print(f"‚úÖ Evento: {summary['event']['name']}")
    print(f"‚úÖ Detectores disponibles: {summary['statistics']['available_detectors']}")
    print(f"‚úÖ SNR de red: {summary['statistics']['network_snr']:.2f}")
    print()
    
    return True


def test_snr_values():
    """
    Test 6: Validar valores de SNR esperados seg√∫n el problema statement.
    """
    print("=" * 70)
    print("TEST 6: Valores de SNR Esperados")
    print("=" * 70)
    
    try:
        from snr_gw200129_analysis import DETECTOR_RESPONSE
    except ImportError as e:
        print(f"‚ö†Ô∏è  Importaci√≥n fallida: {e}")
        print(f"‚úÖ Test omitido (dependencia no disponible)")
        print()
        return True
    
    # Validar valores seg√∫n el problema statement
    expected_values = {
        "H1": {"f_eff": 0.2140, "snr": 4.15},
        "L1": {"f_eff": 0.3281, "snr": 5.23},
        "V1": {"f_eff": 0.8669, "snr": 6.47},
        "K1": {"f_eff": 0.3364, "snr": None}
    }
    
    for detector, expected in expected_values.items():
        actual = DETECTOR_RESPONSE[detector]
        
        # Validar F_eff
        if expected["f_eff"] is not None:
            assert abs(actual["f_eff"] - expected["f_eff"]) < 0.0001, \
                f"{detector}: F_eff esperado {expected['f_eff']}, obtenido {actual['f_eff']}"
        
        # Validar SNR
        if expected["snr"] is not None:
            assert abs(actual["snr_expected"] - expected["snr"]) < 0.01, \
                f"{detector}: SNR esperada {expected['snr']}, obtenido {actual['snr_expected']}"
        else:
            assert actual["snr_expected"] is None, \
                f"{detector}: SNR esperada debe ser None (no disponible)"
        
        print(f"‚úÖ {detector}: F_eff = {actual['f_eff']}, SNR = {actual['snr_expected']}")
    
    print(f"‚úÖ Todos los valores coinciden con el problema statement")
    print()
    
    return True


def main():
    """
    Ejecuta todos los tests.
    """
    print()
    print("üß™ SUITE DE TESTS: An√°lisis SNR GW200129_065458")
    print()
    
    tests = [
        ("Configuraci√≥n del Evento", test_event_configuration),
        ("Respuesta de Detectores", test_detector_response),
        ("Configuraci√≥n de Frecuencia", test_frequency_configuration),
        ("C√°lculo de SNR de Red", test_network_snr_calculation),
        ("Generaci√≥n de Resumen", test_generate_summary),
        ("Valores de SNR Esperados", test_snr_values),
    ]
    
    passed = 0
    failed = 0
    
    for name, test_func in tests:
        try:
            result = test_func()
            if result:
                passed += 1
            else:
                failed += 1
                print(f"‚ùå Test '{name}' fall√≥")
        except AssertionError as e:
            failed += 1
            print(f"‚ùå Test '{name}' fall√≥: {e}")
            print()
        except Exception as e:
            failed += 1
            print(f"‚ùå Test '{name}' fall√≥ con error: {e}")
            print()
    
    # Resumen
    print("=" * 70)
    print("RESUMEN DE TESTS")
    print("=" * 70)
    print(f"‚úÖ Tests aprobados: {passed}/{len(tests)}")
    print(f"‚ùå Tests fallidos:  {failed}/{len(tests)}")
    print()
    
    if failed == 0:
        print("üéâ TODOS LOS TESTS APROBADOS")
        return 0
    else:
        print(f"‚ö†Ô∏è {failed} test(s) fallaron")
        return 1


if __name__ == "__main__":
    sys.exit(main())

#!/usr/bin/env python3
"""
Demostraci√≥n de An√°lisis de Convergencia

Este script demuestra c√≥mo usar las funciones de verificaci√≥n de convergencia
y constantes fundamentales seg√∫n el Protocolo de Verificaci√≥n Experimental
descrito en la Secci√≥n X del paper.

Uso:
    python3 demo_convergencia.py              # Demo r√°pida
    python3 demo_convergencia.py --full       # An√°lisis completo (m√°s lento)
    python3 demo_convergencia.py --save       # Guardar gr√°ficos
"""

import sys
import os
import argparse
import matplotlib
import matplotlib.pyplot as plt

# A√±adir directorio de scripts al path
sys.path.insert(0, os.path.dirname(__file__))

from verificacion_convergencia import (
    QuantumFrequencyCalculator,
    verify_fundamental_constants,
    plot_convergence_analysis
)


def demo_rapida():
    """
    Demostraci√≥n r√°pida con an√°lisis b√°sico.
    """
    print("=" * 80)
    print("DEMOSTRACI√ìN R√ÅPIDA - AN√ÅLISIS DE CONVERGENCIA")
    print("=" * 80)
    
    # Paso 1: Verificar constantes fundamentales
    print("\n1. Verificando constantes fundamentales (œÜ, Œ≥)...")
    print("-" * 80)
    resultado = verify_fundamental_constants()
    
    if resultado['all_verified']:
        print("\n‚úÖ Todas las constantes verificadas correctamente")
    else:
        print("\n‚ùå Algunas verificaciones fallaron")
    
    # Paso 2: Crear calculador
    print("\n2. Inicializando calculador de frecuencia cu√°ntica...")
    print("-" * 80)
    calculator = QuantumFrequencyCalculator(precision=30)
    print(f"‚úì Precisi√≥n: {calculator.precision} d√≠gitos decimales")
    print(f"‚úì œÜ = {float(calculator.phi):.15f}")
    print(f"‚úì Œ≥ = {float(calculator.gamma):.15f}")
    print(f"‚úì f‚ÇÄ objetivo = {float(calculator.f0_target)} Hz")
    
    # Paso 3: Calcular frecuencias con diferentes N
    print("\n3. Calculando frecuencias con diferentes n√∫meros de primos...")
    print("-" * 80)
    test_values = [100, 500, 1000, 5000]
    
    for n in test_values:
        freq = calculator.calculate_frequency_from_primes(n)
        error = abs(float(freq) - float(calculator.f0_target))
        error_rel = error / float(calculator.f0_target) * 100
        print(f"N={n:5d} primos: f = {float(freq):.6f} Hz, "
              f"error = {error:.6f} Hz ({error_rel:.4f}%)")
    
    # Paso 4: An√°lisis de convergencia (r√°pido)
    print("\n4. Realizando an√°lisis de convergencia (r√°pido)...")
    print("-" * 80)
    print("Analizando convergencia con max_primes=2000, step=500...")
    
    df = calculator.convergence_analysis(max_primes=2000, step=500)
    
    print(f"\n‚úì An√°lisis completado con {len(df)} puntos")
    print("\nPrimeros resultados:")
    print(df.head())
    
    print("\n5. Generando visualizaci√≥n...")
    print("-" * 80)
    matplotlib.use('Agg')  # Backend sin GUI
    plot_convergence_analysis(df)
    plt.savefig('/tmp/convergencia_rapida.png', dpi=150, bbox_inches='tight')
    print("‚úì Gr√°fico guardado en: /tmp/convergencia_rapida.png")
    plt.close()
    
    print("\n" + "=" * 80)
    print("‚úÖ DEMOSTRACI√ìN R√ÅPIDA COMPLETADA")
    print("=" * 80)


def demo_completa():
    """
    Demostraci√≥n completa con an√°lisis extensivo.
    """
    print("=" * 80)
    print("DEMOSTRACI√ìN COMPLETA - AN√ÅLISIS DE CONVERGENCIA")
    print("‚ö†Ô∏è  ADVERTENCIA: Este an√°lisis puede tomar varios minutos")
    print("=" * 80)
    
    # Paso 1: Verificar constantes
    print("\n1. Verificando constantes fundamentales con alta precisi√≥n...")
    print("-" * 80)
    verify_fundamental_constants()
    
    # Paso 2: Crear calculador con alta precisi√≥n
    print("\n2. Inicializando calculador con precisi√≥n de 50 d√≠gitos...")
    print("-" * 80)
    calculator = QuantumFrequencyCalculator(precision=50)
    print("‚úì Calculador inicializado")
    
    # Paso 3: An√°lisis de convergencia completo
    print("\n3. Realizando an√°lisis de convergencia completo...")
    print("-" * 80)
    print("Analizando con max_primes=30000, step=5000...")
    print("Esto puede tomar 1-2 minutos...")
    
    df = calculator.convergence_analysis(max_primes=30000, step=5000)
    
    print(f"\n‚úì An√°lisis completado con {len(df)} puntos")
    
    # Estad√≠sticas
    print("\n4. Estad√≠sticas de convergencia:")
    print("-" * 80)
    print(f"Error relativo m√≠nimo: {df['error_rel'].min():.6f}%")
    print(f"Error relativo m√°ximo: {df['error_rel'].max():.6f}%")
    print(f"Error relativo promedio: {df['error_rel'].mean():.6f}%")
    print(f"\nRatio |‚àáŒû(1)|/‚àöN promedio: {df['ratio'].mean():.6f}")
    print(f"Ratio |‚àáŒû(1)|/‚àöN std: {df['ratio'].std():.6f}")
    
    # Resultados finales
    print("\n5. Resultados con N=30000:")
    print("-" * 80)
    ultimo = df.iloc[-1]
    print(f"Frecuencia calculada: {ultimo['frequency']:.6f} Hz")
    print(f"Error relativo: {ultimo['error_rel']:.6f}%")
    print(f"|‚àáŒû(1)| observado: {ultimo['magnitude']:.2f}")
    print(f"‚àöN te√≥rico: {ultimo['sqrt_n']:.2f}")
    print(f"Ratio: {ultimo['ratio']:.6f}")
    
    # Visualizaci√≥n
    print("\n6. Generando visualizaci√≥n completa...")
    print("-" * 80)
    matplotlib.use('Agg')
    plot_convergence_analysis(df)
    plt.savefig('/tmp/convergencia_completa.png', dpi=150, bbox_inches='tight')
    print("‚úì Gr√°fico guardado en: /tmp/convergencia_completa.png")
    plt.close()
    
    print("\n" + "=" * 80)
    print("‚úÖ DEMOSTRACI√ìN COMPLETA FINALIZADA")
    print("=" * 80)


def main():
    """
    Funci√≥n principal con argumentos de l√≠nea de comando.
    """
    parser = argparse.ArgumentParser(
        description="Demostraci√≥n de an√°lisis de convergencia para f‚ÇÄ = 141.7001 Hz"
    )
    parser.add_argument(
        '--full',
        action='store_true',
        help='Ejecutar an√°lisis completo (max_primes=30000, m√°s lento)'
    )
    parser.add_argument(
        '--save',
        action='store_true',
        help='Guardar gr√°ficos en archivo'
    )
    
    args = parser.parse_args()
    
    if args.full:
        demo_completa()
    else:
        demo_rapida()
    
    print("\nüí° NOTA:")
    print("Para ejecutar el an√°lisis completo (recomendado), use:")
    print("    python3 demo_convergencia.py --full")


if __name__ == "__main__":
    main()
